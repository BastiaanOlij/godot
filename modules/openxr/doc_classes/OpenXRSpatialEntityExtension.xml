<?xml version="1.0" encoding="UTF-8" ?>
<class name="OpenXRSpatialEntityExtension" inherits="OpenXRExtensionWrapper" experimental="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		OpenXR extension that handles spatial entities.
	</brief_description>
	<description>
		OpenXR extension that handles spatial entities and, when enabled, allows for querying those spatial entities. This extension will also automatically manage [XRTracker] objects for static entities.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_spatial_entity">
			<return type="RID" />
			<param index="0" name="spatial_context" type="RID" />
			<param index="1" name="entity_id" type="int" />
			<param index="2" name="entity" type="int" />
			<description>
				Registers an entity that was created directly on the OpenXR runtime.
			</description>
		</method>
		<method name="create_spatial_context">
			<return type="OpenXRFutureResult" />
			<param index="0" name="capability_configurations" type="OpenXRSpatialCapabilityConfigurationBaseHeader[]" />
			<param index="1" name="next" type="OpenXRStructureBase" default="null" />
			<param index="2" name="user_callback" type="Callable" default="Callable()" />
			<description>
				Create a new spatial context that handles entities for the provided capability configurations. [param capability_configurations] is an array of [OpenXRSpatialCapabilityConfigurationBaseHeader] with the needed capability configuration data.
				[param next] is an optional parameter that can contain additional information for creating our spatial context.
				[b]Note:[/b] This is an asynchronous method and returns a [OpenXRFutureResult] object with which to track the status, discarding this object will not cancel the creation process. On success [param user_callback] will be called if specified. The result data for this function is the [RID] for our spatial context.
			</description>
		</method>
		<method name="discover_spatial_entities">
			<return type="OpenXRFutureResult" />
			<param index="0" name="spatial_context" type="RID" />
			<param index="1" name="component_types" type="PackedInt64Array" />
			<param index="2" name="next" type="OpenXRStructureBase" default="null" />
			<param index="3" name="user_callback" type="Callable" default="Callable()" />
			<description>
				Start a new discovery query, this will gather all objects tracked by the [param spatial_context] that have at least one of the component types specified in [param component_types].
				[param next] is an optional parameter that can contain additional information for executing the discovery query.
				[b]Note:[/b] This is an asynchronous method and returns a [OpenXRFutureResult] object with which to track the status, discarding this object will not cancel the discovery process. On success [param user_callback] will be called if specified. The result data for this function is the [RID] for our snapshot.
			</description>
		</method>
		<method name="find_spatial_entity">
			<return type="RID" />
			<param index="0" name="entity_id" type="int" />
			<description>
				Returns the [RID] for the specified spatial entity ID.
			</description>
		</method>
		<method name="free_spatial_context">
			<return type="void" />
			<param index="0" name="spatial_context" type="RID" />
			<description>
				Free a spatial context previously created when calling [method create_spatial_context]. If the spatial context creation is still ongoing, the asynchronous process is cancelled.
			</description>
		</method>
		<method name="free_spatial_entity">
			<return type="void" />
			<param index="0" name="entity" type="RID" />
			<description>
				Frees an entity previously created when calling [method add_spatial_entity] or [method make_spatial_entity].
			</description>
		</method>
		<method name="free_spatial_snapshot">
			<return type="void" />
			<param index="0" name="spatial_snapshot" type="RID" />
			<description>
				Free a spatial snapshot previously created when calling [method discover_spatial_entities]. If the spatial snapshot creation is still ongoing, the asynchronous process is cancelled.
			</description>
		</method>
		<method name="get_float_buffer" qualifiers="const">
			<return type="PackedFloat32Array" />
			<param index="0" name="spatial_snapshot" type="RID" />
			<param index="1" name="buffer_id" type="int" />
			<description>
				Returns a buffer with floats from a buffer that was retrieved when taking a snapshot.
			</description>
		</method>
		<method name="get_spatial_context_handle" qualifiers="const">
			<return type="int" />
			<param index="0" name="spatial_context" type="RID" />
			<description>
				Returns the OpenXR spatial context handle for this snapshot.
				[b]Note:[/b] This method is intended to be used from GDExtensions that implement spatial entity capability handlers.
			</description>
		</method>
		<method name="get_spatial_context_ready" qualifiers="const">
			<return type="bool" />
			<param index="0" name="spatial_context" type="RID" />
			<description>
				Returns [code]true[/code] if the spatial context finished its creation and is ready to be used.
			</description>
		</method>
		<method name="get_spatial_entity_context" qualifiers="const">
			<return type="RID" />
			<param index="0" name="entity" type="RID" />
			<description>
				Returns the spatial context for this entity.
			</description>
		</method>
		<method name="get_spatial_entity_id" qualifiers="const">
			<return type="int" />
			<param index="0" name="entity" type="RID" />
			<description>
				Returns the internal [code]XrSpatialEntityIdEXT[/code] associated with the entity.
			</description>
		</method>
		<method name="get_spatial_snapshot_context" qualifiers="const">
			<return type="RID" />
			<param index="0" name="spatial_snapshot" type="RID" />
			<description>
				Returns the spatial context related to this spatial snapshot.
			</description>
		</method>
		<method name="get_spatial_snapshot_handle" qualifiers="const">
			<return type="int" />
			<param index="0" name="spatial_snapshot" type="RID" />
			<description>
				Returns the OpenXR spatial snapshot handle for this snapshot.
				[b]Note:[/b] This method is intended to be used from GDExtensions that implement spatial entity capability handlers.
			</description>
		</method>
		<method name="get_string" qualifiers="const">
			<return type="String" />
			<param index="0" name="spatial_snapshot" type="RID" />
			<param index="1" name="buffer_id" type="int" />
			<description>
				Returns a string from a buffer that was retrieved when taking a snapshot.
			</description>
		</method>
		<method name="get_uint8_buffer" qualifiers="const">
			<return type="PackedByteArray" />
			<param index="0" name="spatial_snapshot" type="RID" />
			<param index="1" name="buffer_id" type="int" />
			<description>
				Returns a buffer with 8 bit ints from a buffer that was retrieved when taking a snapshot.
			</description>
		</method>
		<method name="get_uint16_buffer" qualifiers="const">
			<return type="PackedInt32Array" />
			<param index="0" name="spatial_snapshot" type="RID" />
			<param index="1" name="buffer_id" type="int" />
			<description>
				Returns a buffer with 16 bit ints from a buffer that was retrieved when taking a snapshot.
			</description>
		</method>
		<method name="get_uint32_buffer" qualifiers="const">
			<return type="PackedInt32Array" />
			<param index="0" name="spatial_snapshot" type="RID" />
			<param index="1" name="buffer_id" type="int" />
			<description>
				Returns a buffer with 32 bit ints from a buffer that was retrieved when taking a snapshot.
			</description>
		</method>
		<method name="get_vector2_buffer" qualifiers="const">
			<return type="PackedVector2Array" />
			<param index="0" name="spatial_snapshot" type="RID" />
			<param index="1" name="buffer_id" type="int" />
			<description>
				Returns a buffer with [Vector2] entries from a buffer that was retrieved when taking a snapshot.
			</description>
		</method>
		<method name="get_vector3_buffer" qualifiers="const">
			<return type="PackedVector3Array" />
			<param index="0" name="spatial_snapshot" type="RID" />
			<param index="1" name="buffer_id" type="int" />
			<description>
				Returns a buffer with [Vector3] entries from a buffer that was retrieved when taking a snapshot.
			</description>
		</method>
		<method name="make_spatial_entity">
			<return type="RID" />
			<param index="0" name="spatial_context" type="RID" />
			<param index="1" name="entity_id" type="int" />
			<description>
				Creates a new entity for this [param entity_id]. The [param spatial_context] should match the context that discovered the entity.
			</description>
		</method>
		<method name="query_snapshot">
			<return type="bool" />
			<param index="0" name="spatial_snapshot" type="RID" />
			<param index="1" name="component_data" type="OpenXRSpatialComponentData[]" />
			<param index="2" name="next" type="OpenXRStructureBase" default="null" />
			<description>
				Query the snapshot data. This will find all entities in the snapshot that contain all requested components in [param component_data]. The objects held within [param component_data] will then be populated with the queried data. [param component_data] must always have an object of [OpenXRSpatialQueryResultData] as the first entry.
				[param next] is an optional parameter that can contain additional information passed when setting our query conditions.
			</description>
		</method>
		<method name="update_spatial_entities">
			<return type="RID" />
			<param index="0" name="spatial_context" type="RID" />
			<param index="1" name="entities" type="RID[]" />
			<param index="2" name="component_types" type="PackedInt64Array" />
			<param index="3" name="next" type="OpenXRStructureBase" default="null" />
			<description>
				Performs a snapshot for a limited number of entities. This is NOT an asynchronous method and will return the snapshot immediately.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="spatial_discovery_recommended">
			<param index="0" name="spatial_context" type="RID" />
			<description>
				Emitted when OpenXR recommends running a discovery query because entities managed by this spatial context have (likely) changed.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="XR_SPATIAL_COMPONENT_TYPE_BOUNDED_2D_EXT" value="1" enum="XrSpatialComponentTypeEXT">
			Component that provides the 2D bounds for a spatial entity. Corresponding list structure is XrSpatialComponentBounded2DListEXT; Corresponding data structure is XrSpatialBounded2DDataEXT
		</constant>
		<constant name="XR_SPATIAL_COMPONENT_TYPE_BOUNDED_3D_EXT" value="2" enum="XrSpatialComponentTypeEXT">
			Component that provides the 3D bounds for a spatial entity. Corresponding list structure is XrSpatialComponentBounded3DListEXT; Corresponding data structure is XrBoxf
		</constant>
		<constant name="XR_SPATIAL_COMPONENT_TYPE_PARENT_EXT" value="3" enum="XrSpatialComponentTypeEXT">
			Component that provides the XrSpatialEntityIdEXT of the parent for a spatial entity. Corresponding list structure is XrSpatialComponentParentListEXT; Corresponding data structure is XrSpatialEntityIdEXT
		</constant>
		<constant name="XR_SPATIAL_COMPONENT_TYPE_MESH_3D_EXT" value="4" enum="XrSpatialComponentTypeEXT">
			Component that provides a 3D mesh for a spatial entity. Corresponding list structure is XrSpatialComponentMesh3DListEXT; Corresponding data structure is XrSpatialMeshDataEXT
		</constant>
		<constant name="XR_SPATIAL_COMPONENT_TYPE_PLANE_ALIGNMENT_EXT" value="1000741000" enum="XrSpatialComponentTypeEXT">
			Component that provides the plane alignment enum for a spatial entity. Corresponding list structure is XrSpatialComponentPlaneAlignmentListEXT; Corresponding data structure is XrSpatialPlaneAlignmentEXT (Added by the XR_EXT_spatial_plane_tracking extension)
		</constant>
		<constant name="XR_SPATIAL_COMPONENT_TYPE_MESH_2D_EXT" value="1000741001" enum="XrSpatialComponentTypeEXT">
			Component that provides a 2D mesh for a spatial entity. Corresponding list structure is XrSpatialComponentMesh2DListEXT; Corresponding data structure is XrSpatialMeshDataEXT (Added by the XR_EXT_spatial_plane_tracking extension)
		</constant>
		<constant name="XR_SPATIAL_COMPONENT_TYPE_POLYGON_2D_EXT" value="1000741002" enum="XrSpatialComponentTypeEXT">
			Component that provides a 2D boundary polygon for a spatial entity. Corresponding list structure is XrSpatialComponentPolygon2DListEXT; Corresponding data structure is XrSpatialPolygon2DDataEXT (Added by the XR_EXT_spatial_plane_tracking extension)
		</constant>
		<constant name="XR_SPATIAL_COMPONENT_TYPE_PLANE_SEMANTIC_LABEL_EXT" value="1000741003" enum="XrSpatialComponentTypeEXT">
			Component that provides a semantic label for a plane. Corresponding list structure is XrSpatialComponentPlaneSemanticLabelListEXT; Corresponding data structure is XrSpatialPlaneSemanticLabelEXT (Added by the XR_EXT_spatial_plane_tracking extension)
		</constant>
		<constant name="XR_SPATIAL_COMPONENT_TYPE_MARKER_EXT" value="1000743000" enum="XrSpatialComponentTypeEXT">
			A component describing the marker type, id and location. Corresponding list structure is XrSpatialComponentMarkerListEXT; Corresponding data structure is XrSpatialMarkerDataEXT (Added by the XR_EXT_spatial_marker_tracking extension)
		</constant>
		<constant name="XR_SPATIAL_COMPONENT_TYPE_ANCHOR_EXT" value="1000762000" enum="XrSpatialComponentTypeEXT">
			Component that provides the location for an anchor. Corresponding list structure is XrSpatialComponentAnchorListEXT; Corresponding data structure is XrPosef (Added by the XR_EXT_spatial_anchor extension)
		</constant>
		<constant name="XR_SPATIAL_COMPONENT_TYPE_PERSISTENCE_EXT" value="1000763000" enum="XrSpatialComponentTypeEXT">
			Component that provides the persisted UUID for a spatial entity. Corresponding list structure is XrSpatialComponentPersistenceListEXT; Corresponding data structure is XrSpatialPersistenceDataEXT (Added by the XR_EXT_spatial_persistence extension)
		</constant>
		<constant name="XR_SPATIAL_COMPONENT_TYPE_MAX_ENUM_EXT" value="2147483647" enum="XrSpatialComponentTypeEXT">
			Maximum value for [enum XrSpatialComponentTypeEXT], do NOT use in loops!
		</constant>
	</constants>
</class>
